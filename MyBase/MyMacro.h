#pragma once

#include <assert.h>

#define BOOM assert(false)

#define MAPCOUNT_X 40
#define MAPCOUNT_Y 40

#define MAPSIZE_X 40
#define MAPSIZE_Y 40

#define TILE_WIDTH 129.0f
#define TILE_HEIGHT 193.0f

#define HALF_TILE_WIDTH 64.0f
#define HALF_TILE_HEIGHT 32.0f

#define QUARTER_TILE_WIDTH 32.0f
#define QUARTER_TILE_HEIGHT 16.0f

#define TILE_SUBOFFSETX 0.0f
#define TILE_SUBOFFSETY 64.0f

#define TILE_OFFSETX 128.0f
#define TILE_OFFSETY 190.0f

enum MONSTER_DIR
{


	RB,
	B,
	LB,
	L,
	LT,
	T,
	RT,
	R,
	MD_MAX
};

// 위에 있을수록 먼저 나온다.
enum LEAGUE_ORDER
{
	LO_BBG,
	LO_BG,
	LO_SECONDTILE,

	LO_TILE,

	LO_ITEM,
	LO_SMALLFOG,
	LO_ITEMBACK,

	LO_UPTILE,
	LO_PLAYER,

	LO_DOWNTILE,

	// LO_WALL,

	LO_ITEMUP,
	LO_BIGFOG,

	LO_UI0,
	LO_UI1,
	LO_UI2,
	LO_UI3,
	LO_UI35,
	LO_UI4,
	LO_UI5,





	LO_DEBUG,
	LO_MAX
};

enum TILE_ORDER
{
	TO_UPTILE,
	TO_PLAYER,
	TO_DOWNTILE,
	TO_MAX
};

enum COL_LEAGUE
{
	CL_PLAYER,
	CL_MONSTER,
	CL_MOUSE,
	CL_UI
};

enum COL_TYPE
{
	CT_RECT2D,
	CT_CIRCLE2D,
	CT_POINT2D,
	CT_MAX
};



enum PLAYER_STATE
{
	PS_IDLE,
	PS_WALK,
	PS_ATTACK,
	PS_BLOCK,
	PS_DIE,
	PS_BLUESKILL,
	PS_REDSKILL,
	PS_GETHIT,
	PS_MAX
};

enum MONSTER_STATE
{
	MS_IDLE,
	MS_WALK,
	MS_ATTACK,
	MS_DIE,
	MS_GETHIT,
	MS_SPECIAL,
	MS_REST,
	MS_MAX
};

// x 개수 20, 11
enum IMAGE_INDEX
{
	II_INWALL = 21,

	II_FLOOR = 12,

	II_LEFTWALL = 0,
	II_TOPWALL = 1,
	II_RIGHTWALL = 17,
	II_DOWNWALL = 18,

	II_LASTLEFT1 = 5,
	II_LASTLEFT2 = 15,

	II_LASTRIGHT1 = 6,
	II_LASTRIGHT2 = 16,

	II_LEFTTOP = 3,
	II_RIGHTDOWN = 19,
	II_LEFTDOWN = 23,
	II_RIGHTTOP = 22,

	II_LEFTTOPWALL = 20,
	II_RIGHTDOWNWALL = 2,

	II_LEFTDOWNWALL = 6,
	II_RIGHTTOPWALL = 5,

	II_COLUMN = 14,
	II_COLUMNSHADOW1 = 141,
	II_COLUMNSHADOW2 = 144,

	II_LEFTDOOR = 24,
	II_RIGHTDOOR = 24,
	II_TOPDOOR = 25,
	II_BOTTOMDOOR = 25,

	II_UP1 = 21,
	II_UP2 = 65,
	II_UP3 = 22,
	II_UP4 = 62,
	II_UP5 = 63,
	II_UP6 = 64,
	II_UP7 = 12,
	II_UP8 = 66,
	II_UP9 = 67,

	II_DOWN1 = 61,

	II_DOWN2 = 56,
	II_DOWN3 = 57,

	II_DOWN4 = 60,

	II_DOWN5 = 58,
	II_DOWN6 = 59,

	// 스타일
	// 120번대...
	II_CANDLE = 127,
	II_BIGBOX = 130,
	II_STONE1 = 132,
	II_STONE2 = 133,
	II_STONE3 = 134,
	II_STONE4 = 135,
	II_STONE5 = 136,
	II_STONE6 = 137,

	// 100번대
	II_BLOOD1 = 103,
	II_BLOOD2 = 104,
	II_BLOOD3 = 105,

	// 벽 스타일
	II_BLOOD_TOPWALL1 = 96,
	II_BLOOD_TOPWALL2 = 97,
	II_BLOOD_TOPWALL3 = 98,

	II_BLOOD_LEFTWALL1 = 99,
	II_BLOOD_LEFTWALL2 = 100,

	II_STATUE_LEFTWALL1 = 106,
	II_STATUE_LEFTWALL2 = 108,
	II_STATUE_LEFTWALL3 = 110,
	II_STATUE_LEFTWALL4 = 112,

	II_STATUE_TOPWALL1 = 107,
	II_STATUE_TOPWALL2 = 109,
	II_STATUE_TOPWALL3 = 111,
	II_STATUE_TOPWALL4 = 113,

	II_BROKEN_TOPWALL1 = 114,
	II_BROKEN_TOPWALL2 = 115,
	II_BROKEN_TOPWALL3 = 116,

	II_BROKEN_LEFTWALL1 = 121,
	II_BROKEN_LEFTWALL2 = 123,


	// 그림자
	II_LDSHADOW1 = 144,
	II_LDSHADOW2 = 141,
	II_TOPSHADOW = 208,
	II_RIGHTTOPSHADOW = 207,

	II_CANDLESHADOW1 = 128,
	II_CANDLESHADOW2 = 129,

	II_BOXSHADOW = 131,


	// 쇠창살
	II_IRON_TOPWALL = 35,
	II_IRON_LEFTWALL = 34,
	II_IRON_DOWNWALL = 35,
	II_IRON_RIGHTWALL = 34,



	II_IRON_LEFTDOWN = 32,
	II_IRON_RIGHTDOWN = 31,
	// II_IRON_RIGHTTOP = 36,

	II_IRON_LEFTTOP_RIGHT = 26,
	II_IRON_LEFTTOP_LEFT = 36,

	/////////////////////////////////// 아치
	II_ARCH_LEFT = 209,
	II_ARCH_LEFTWALL = 211,
	II_ARCH_LASTLEFT = 7,


	II_ARCH_TOP = 210,
	II_ARCH_TOPWALL = 212,
	II_ARCH_LASTTOP = 8,

	II_ARCH_LEFTTOP = 214,

	II_ARCH_TOPSHADOW = 139,
	II_ARCH_TOPSHADOWWALL = 213,


	/////////////////////////////////// 아치 그림자
	II_ARCH_LASTTOP_SHADOW = 138,
	II_ARCH_LASTTOP_SHADOW2 = 150,

	II_ARCH_LDSHADOW3 = 143,

	////////////////////////// 아치 왼쪽
	II_ARCH_LEFTWALL_SHADOW = 145,

	II_ARCH_RIGHTDOWNWALL_SHADOW = 149,

	II_ARCH_RIGHTTOPWALL = 9,

	II_ARCH_TOPWALL_SHADOW = 215,

	II_LEFTWALL1_B = 165,
	II_LEFTWALL2_B = 166,
	II_TOPWALL1_B = 168,
	II_TOPWALL2_B = 169,
	II_LEFTTOPWALL_B = 167,
	II_FLOOR1_B = 170,
	II_FLOOR2_B = 171,
	II_FLOOR3_B = 172,
	II_FLOOR4_B = 173,

	II_BDOOR = 185,

	II_MAX
};

enum WALL_TYPE
{
	WT_NONE,

	WT_FLOOR,

	WT_LEFTWALL,
	WT_RIGHTWALL,
	WT_TOPWALL,
	WT_DOWNWALL,

	WT_LASTLEFT1,
	WT_LASTLEFT2,
	WT_LASTRIGHT1,
	WT_LASTRIGHT2,

	WT_LEFTDOWN,
	WT_RIGHTDOWN,
	WT_RIGHTTOP,
	WT_LEFTTOP,

	WT_LEFTDOWNWALL,
	WT_RIGHTDOWNWALL,
	WT_RIGHTTOPWALL,
	WT_LEFTTOPWALL,

	WT_COLUMN,
	WT_COLUMNSHADOW1,
	WT_COLUMNSHADOW2,




	// 계단
	WT_UP1,
	WT_UP2,
	WT_UP3,
	WT_UP4,
	WT_UP5,
	WT_UP6,
	WT_UP7,
	WT_UP8,
	WT_UP9,

	WT_DOWN1,
	WT_DOWN2,
	WT_DOWN3,
	WT_DOWN4,
	WT_DOWN5,
	WT_DOWN6,

	// 문
	WT_LEFTDOOR,
	WT_TOPDOOR,
	WT_RIGHTDOOR,
	WT_BOTTOMDOOR,

	// 그림자
	WT_LDSHADOW1,
	WT_LDSHADOW2,
	WT_TOPSHADOW,
	WT_RIGHTTOPSHADOW,

	WT_CANDLESHADOW1,
	WT_CANDLESHADOW2,

	WT_BOXSHADOW,

	// 바닥 스타일
	// 120번대...
	WT_CANDLE,
	WT_BIGBOX,
	WT_STONE1,
	WT_STONE2,
	WT_STONE3,
	WT_STONE4,
	WT_STONE5,
	WT_STONE6,

	// 100번대
	WT_BLOOD1,
	WT_BLOOD2,
	WT_BLOOD3,

	// 벽 스타일
	WT_BLOOD_TOPWALL1,
	WT_BLOOD_TOPWALL2,
	WT_BLOOD_TOPWALL3,

	WT_BLOOD_LEFTWALL1,
	WT_BLOOD_LEFTWALL2,

	WT_STATUE_LEFTWALL1,
	WT_STATUE_LEFTWALL2,
	WT_STATUE_LEFTWALL3,
	WT_STATUE_LEFTWALL4,

	WT_STATUE_TOPWALL1,
	WT_STATUE_TOPWALL2,
	WT_STATUE_TOPWALL3,
	WT_STATUE_TOPWALL4,

	WT_BROKEN_TOPWALL1,
	WT_BROKEN_TOPWALL2,
	WT_BROKEN_TOPWALL3,

	WT_BROKEN_LEFTWALL1,
	WT_BROKEN_LEFTWALL2,

	// 쇠창살
	WT_IRON_TOPWALL,
	WT_IRON_LEFTWALL,
	WT_IRON_DOWNWALL,
	WT_IRON_RIGHTWALL,

	WT_IRON_LEFTTOP_LEFT,
	WT_IRON_LEFTTOP_RIGHT,

	WT_IRON_LEFTDOWN,
	WT_IRON_RIGHTDOWN,
	/*WT_IRON_RIGHTTOP,
	WT_IRON_LEFTTOP,*/

	// 아치
	WT_ARCH_LEFT,
	WT_ARCH_LEFTWALL,
	WT_ARCH_LASTLEFT,
	WT_ARCH_TOP,
	WT_ARCH_TOPWALL,
	WT_ARCH_LASTTOP,

	WT_ARCH_LEFTTOP,

	WT_ARCH_TOPSHADOW,
	WT_ARCH_TOPSHADOWWALL,

	// 10/04
	WT_ARCH_LASTTOP_SHADOW,
	WT_ARCH_LASTTOP_SHADOW2,

	WT_ARCH_LDSHADOW3,

	// LEFT
	WT_ARCH_LEFTWALL_SHADOW,
	WT_ARCH_RIGHTDOWNWALL_SHADOW,

	WT_ARCH_RIGHTTOPWALL,

	WT_ARCH_TOPWALL_SHADOW,

	WT_LEFTWALL1_B,
	WT_LEFTWALL2_B,
	WT_TOPWALL1_B,
	WT_TOPWALL2_B,
	WT_LEFTTOPWALL_B,
	WT_FLOOR1_B,
	WT_FLOOR2_B,
	WT_FLOOR3_B,
	WT_FLOOR4_B,

	WT_BDOOR,


	WT_MAX
};

enum FLOOR_STYLE
{
	// 120번대...
	FS_CANDLE,
	FS_BIGBOX,
	FS_STONE1,
	FS_STONE2,
	FS_STONE3,
	FS_STONE4,
	FS_STONE5,
	FS_STONE6,

	// 100번대
	FS_BLOOD1,
	FS_BLOOD2,
	FS_BLOOD3,

	FS_MAX,
};

enum DIR_TYPE
{
	DT_W,
	DT_WS,
	DT_S,
	DT_SE,
	DT_E,
	DT_EN,
	DT_N,
	DT_NW,
	DT_MAX
};

enum CLASS_TYPE
{
	CLT_WARRIOR,
	CLT_ROGUE,
	CLT_SORCERER,
	CLT_NONE,
};

// 타일 타입
enum TILE_TYPE
{
	TT_INWALL,

	TT_WALL,
	TT_CORNER,
	TT_FLOOR,

	TT_LEFT_DOOR,
	TT_BOTTOM_DOOR,
	TT_RIGHT_DOOR,
	TT_TOP_DOOR,

	TT_STAIR,

	TT_PILLAR,

	TT_MAX
};

enum STAIR_TYPE
{
	ST_UP1,
	ST_UP2,
	ST_UP3,
	ST_UP4,
	ST_UP5,
	ST_UP6,

	ST_DOWN1,
	ST_DOWN2,
	ST_DOWN3,
	ST_DOWN4,

	ST_MAX
};


enum ROOM_TYPE
{
	RT_LEFT,
	RT_BOTTOM,
	RT_RIGHT,
	RT_TOP,
	RT_MAX
};

enum CHAR_STATS
{
	CS_NONE,
	CS_STR,
	CS_DEX,
	CS_MAG,
	CS_VIT,
	CS_MAX
};

enum ITEM_TYPE
{
	IT_GOLD,
	IT_WEAPON_AXE,
	IT_WEAPON_CLEAVER,
	IT_WEAPON_SWORD,
	IT_WEAPON_BOW,
	IT_ARMOR_LIGHT,
	IT_ARMOR_HEAVY,
	IT_HELM,
	IT_SHIELD,
	IT_RING,
	IT_NECK,
	IT_BOOK,
	IT_HPOTION,
	IT_MPOTION,
	IT_RPOTION,
	IT_ISCROLL,
	IT_PSCROLL,
	IT_MAX
};

union TileIndex
{
public:
	struct
	{
		int X;
		int Y;
	};

	__int64 Index;

public:
	bool operator==(const TileIndex& other) {
		return X == other.X && Y == other.Y;
	}

	TileIndex operator+(const TileIndex& other)
	{
		TileIndex Return;
		Return.X = X + other.X;
		Return.Y = Y + other.Y;
		return Return;
	}

	TileIndex operator+(const int a)
	{
		TileIndex Return;
		Return.X = X + a;
		Return.Y = Y + a;
		return Return;
	}

	TileIndex operator-(const int a)
	{
		TileIndex Return;
		Return.X = X - a;
		Return.Y = Y - a;
		return Return;
	}

	TileIndex operator-(const TileIndex& other)
	{
		TileIndex Return;
		Return.X = X - other.X;
		Return.Y = Y - other.Y;
		return Return;
	}
};